{
    "title": "File Handling",
    "content": "<h2>File Handling in Python</h2><p>File handling is an essential part of any programming language. Python provides built-in functions and methods for working with files, making it easy to read from and write to files.</p><h3>File Opening Modes</h3><table class=\"operator-table\"><tr><th>Mode</th><th>Description</th></tr><tr><td><code>'r'</code></td><td>Read (default) - Open file for reading</td></tr><tr><td><code>'w'</code></td><td>Write - Open file for writing (creates new file or truncates existing file)</td></tr><tr><td><code>'a'</code></td><td>Append - Open file for appending</td></tr><tr><td><code>'x'</code></td><td>Create - Create a new file, fails if file exists</td></tr><tr><td><code>'b'</code></td><td>Binary - Binary mode (e.g., 'rb', 'wb')</td></tr><tr><td><code>'t'</code></td><td>Text - Text mode (default)</td></tr><tr><td><code>'+'</code></td><td>Update - Open for reading and writing (e.g., 'r+')</td></tr></table><h3>Opening and Closing Files</h3><pre><code># Basic syntax for opening a file\nfile = open('filename.txt', 'r')\n\n# Always close files when done\nfile.close()</code></pre><p>It's recommended to use the <code>with</code> statement, which automatically closes the file when the block is exited:</p><pre><code># Using with statement (recommended)\nwith open('filename.txt', 'r') as file:\n    # File operations here\n    content = file.read()\n    \n# File is automatically closed when the block exits</code></pre><h3>Reading from Files</h3><pre><code># Read entire file content as a single string\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n# Read file line by line\nwith open('example.txt', 'r') as file:\n    for line in file:\n        print(line.strip())  # strip() removes trailing newline\n\n# Read all lines into a list\nwith open('example.txt', 'r') as file:\n    lines = file.readlines()\n    print(lines)\n\n# Read specific number of characters\nwith open('example.txt', 'r') as file:\n    chunk = file.read(10)  # Read first 10 characters\n    print(chunk)</code></pre><h3>Writing to Files</h3><pre><code># Write to a file (creates or truncates)\nwith open('output.txt', 'w') as file:\n    file.write('Hello, World!\\n')\n    file.write('Python is awesome!')\n\n# Append to a file\nwith open('output.txt', 'a') as file:\n    file.write('\\nThis line is appended.')</code></pre><h3>Working with CSV Files</h3><p>CSV (Comma-Separated Values) is a common file format for storing tabular data:</p><pre><code>import csv\n\n# Reading CSV\nwith open('data.csv', 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    for row in csv_reader:\n        print(row)  # Each row is a list of values\n\n# Writing CSV\nwith open('new_data.csv', 'w', newline='') as csvfile:\n    csv_writer = csv.writer(csvfile)\n    csv_writer.writerow(['Name', 'Age', 'City'])\n    csv_writer.writerow(['Alice', 25, 'New York'])\n    csv_writer.writerow(['Bob', 30, 'Chicago'])</code></pre><h3>Working with JSON Files</h3><p>JSON (JavaScript Object Notation) is a popular data exchange format:</p><pre><code>import json\n\n# Reading JSON\nwith open('data.json', 'r') as jsonfile:\n    data = json.load(jsonfile)\n    print(data)  # Python dictionary\n\n# Writing JSON\ndata = {\n    'name': 'John Doe',\n    'age': 35,\n    'is_student': False,\n    'courses': ['Python', 'Data Science', 'Machine Learning']\n}\nwith open('new_data.json', 'w') as jsonfile:\n    json.dump(data, jsonfile, indent=4)</code></pre><h3>File System Operations</h3><p>The <code>os</code> and <code>shutil</code> modules provide functions for interacting with the file system:</p><pre><code>import os\nimport shutil\n\n# Check if file exists\nexists = os.path.exists('filename.txt')\n\n# Get file size\nsize = os.path.getsize('filename.txt')  # in bytes\n\n# Get file info\nstats = os.stat('filename.txt')\nprint(f\"Last modified: {stats.st_mtime}\")\n\n# Create directory\nos.mkdir('new_directory')\n\n# List files in directory\nfiles = os.listdir('.')  # Current directory\n\n# Delete file\nos.remove('old_file.txt')\n\n# Copy file\nshutil.copy('source.txt', 'destination.txt')\n\n# Move/rename file\nshutil.move('old_name.txt', 'new_name.txt')</code></pre><h3>Working with Paths</h3><pre><code>import os\n\n# Get current working directory\ncwd = os.getcwd()\nprint(cwd)\n\n# Join path components properly (cross-platform)\npath = os.path.join('directory', 'subdirectory', 'file.txt')\n\n# Get file extension\nfilename, extension = os.path.splitext('document.pdf')\nprint(extension)  # .pdf\n\n# Get directory name and basename\ndirname = os.path.dirname('/path/to/file.txt')  # /path/to\nbasename = os.path.basename('/path/to/file.txt')  # file.txt</code></pre><h3>Error Handling</h3><p>Always handle potential errors when working with files:</p><pre><code>try:\n    with open('nonexistent_file.txt', 'r') as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print(\"The file does not exist\")\nexcept PermissionError:\n    print(\"You don't have permission to access this file\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")</code></pre><h3>Context Managers for Custom File Operations</h3><p>You can create your own context managers for custom file operations:</p><pre><code>class MyFileHandler:\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n        \n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n        \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.file:\n            self.file.close()\n            \n# Using the custom context manager\nwith MyFileHandler('example.txt', 'r') as file:\n    content = file.read()\n    print(content)</code></pre><h3>Working with Binary Files</h3><pre><code># Reading binary file\nwith open('image.jpg', 'rb') as bin_file:\n    data = bin_file.read()\n    print(f\"Read {len(data)} bytes\")\n    \n# Writing binary file\nwith open('copy.jpg', 'wb') as bin_file:\n    bin_file.write(data)</code></pre>",
    "exercises": [
        {
            "title": "File Reader",
            "description": "Create a program that reads a text file named 'sample.txt' and counts the number of lines, words, and characters in it.",
            "hint": "Use file.readlines() to get lines, split() to count words, and len() to count characters. Don't forget to handle potential FileNotFoundError.",
            "startingCode": "# Create a function to count lines, words, and characters in a file\ndef analyze_file(filename):\n    # Your code here\n    pass\n\n# Test the function\ntry:\n    lines, words, chars = analyze_file('sample.txt')\n    print(f\"Lines: {lines}\")\n    print(f\"Words: {words}\")\n    print(f\"Characters: {chars}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")"
        },
        {
            "title": "CSV Data Processor",
            "description": "Write a program that reads a CSV file containing student data (name, age, grade), calculates the average grade, and writes the results to a new CSV file.",
            "hint": "Use the csv module to read and write CSV files. For the average calculation, convert grade values to numbers first.",
            "startingCode": "import csv\n\ndef process_student_data(input_file, output_file):\n    # Read student data and calculate average grade\n    # Then write results to output file\n    pass\n\n# Test with 'students.csv' containing: Name,Age,Grade\n# (Assume this file would have data like: John,18,85\n#  Mary,17,92\n#  etc.)\ntry:\n    process_student_data('students.csv', 'results.csv')\n    print(\"Processing complete. Results written to 'results.csv'\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")"
        },
        {
            "title": "JSON Configuration Manager",
            "description": "Create a program that acts as a configuration manager using a JSON file. It should be able to read settings, update them, and save changes back to the file.",
            "hint": "Use json.load() to read the file, modify the dictionary, and json.dump() to write changes back.",
            "startingCode": "import json\nimport os\n\nclass ConfigManager:\n    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config = {}\n        self.load_config()\n        \n    def load_config(self):\n        # Load configuration from file or create default if file doesn't exist\n        pass\n        \n    def get_setting(self, key):\n        # Return a setting value\n        pass\n        \n    def update_setting(self, key, value):\n        # Update a setting and save to file\n        pass\n        \n    def save_config(self):\n        # Save configuration to file\n        pass\n\n# Test the ConfigManager\nif __name__ == \"__main__\":\n    config = ConfigManager('app_config.json')\n    \n    # Print current settings\n    print(\"Current settings:\", config.config)\n    \n    # Update a setting\n    config.update_setting('theme', 'dark')\n    \n    # Get a setting\n    theme = config.get_setting('theme')\n    print(f\"Current theme: {theme}\")"
        }
    ]
} 