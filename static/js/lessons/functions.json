{
    "title": "Functions",
    "content": "<h2>Functions in Python</h2><p>Functions are reusable blocks of code designed to perform a specific task. They help make your code more organized, reusable, and easier to understand.</p><h3>1. Defining Functions</h3><p>You define a function using the <code>def</code> keyword, followed by a function name and parentheses:</p><pre><code># Basic function definition\ndef greet():\n    print(\"Hello, World!\")</code></pre><p>To call (execute) a function, use the function name followed by parentheses:</p><pre><code>greet()  # Output: Hello, World!</code></pre><h3>2. Function Parameters</h3><p>Functions can accept parameters, which are values passed to the function:</p><pre><code># Function with parameters\ndef greet_person(name):\n    print(f\"Hello, {name}!\")</code></pre><p>When calling the function, you pass arguments that correspond to the parameters:</p><pre><code>greet_person(\"Alice\")  # Output: Hello, Alice!</code></pre><h4>Default Parameter Values</h4><p>You can assign default values to parameters, which are used when no argument is provided:</p><pre><code># Function with default parameter\ndef greet_with_message(name, message=\"Good morning\"):\n    print(f\"{message}, {name}!\")</code></pre><p>This function can be called in different ways:</p><pre><code>greet_with_message(\"Bob\")  # Output: Good morning, Bob!\ngreet_with_message(\"Charlie\", \"Welcome\")  # Output: Welcome, Charlie!</code></pre><h4>Named Arguments</h4><p>You can specify arguments by parameter name, which allows you to provide them in any order:</p><pre><code>greet_with_message(message=\"Hello\", name=\"David\")  # Output: Hello, David!</code></pre><h4>Variable Number of Arguments</h4><p>You can use <code>*args</code> to allow a function to accept any number of positional arguments:</p><pre><code># Function with variable positional arguments\ndef add_numbers(*args):\n    total = 0\n    for num in args:\n        total += num\n    return total</code></pre><p>This function can be called with any number of arguments:</p><pre><code>result = add_numbers(1, 2, 3, 4)  # Result is 10</code></pre><p>Similarly, <code>**kwargs</code> allows a function to accept any number of keyword arguments:</p><pre><code># Function with variable keyword arguments\ndef print_person_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")</code></pre><p>Example usage:</p><pre><code>print_person_info(name=\"Emily\", age=25, country=\"Canada\")</code></pre><p>Output:</p><pre><code>name: Emily\nage: 25\ncountry: Canada</code></pre><h3>3. Return Values</h3><p>Functions can return values using the <code>return</code> statement:</p><pre><code># Function that returns a value\ndef square(number):\n    return number ** 2</code></pre><p>The returned value can be assigned to a variable:</p><pre><code>result = square(5)  # result = 25</code></pre><p>A function can return multiple values as a tuple:</p><pre><code># Function returning multiple values\ndef get_min_max(numbers):\n    return min(numbers), max(numbers)</code></pre><p>Example usage:</p><pre><code>minimum, maximum = get_min_max([3, 1, 5, 2, 4])  # minimum = 1, maximum = 5</code></pre><h3>4. Scope of Variables</h3><p>Variables defined inside a function have a local scope and are only accessible within the function:</p><pre><code>def my_function():\n    local_var = 10  # Local variable\n    print(local_var)\n\nmy_function()  # Output: 10\n# print(local_var)  # This would raise an error because local_var is not accessible here</code></pre><p>Variables defined outside any function have a global scope and are accessible throughout the code:</p><pre><code>global_var = 20  # Global variable\n\ndef print_global():\n    print(global_var)\n\nprint_global()  # Output: 20</code></pre><p>To modify a global variable inside a function, use the <code>global</code> keyword:</p><pre><code>counter = 0\n\ndef increment_counter():\n    global counter\n    counter += 1\n    print(counter)\n\nincrement_counter()  # Output: 1</code></pre><h3>5. Lambda Functions</h3><p>Lambda functions are small, anonymous functions defined using the <code>lambda</code> keyword:</p><pre><code># Lambda function\ndouble = lambda x: x * 2</code></pre><p>This is equivalent to:</p><pre><code>def double(x):\n    return x * 2</code></pre><p>Lambda functions are often used in combination with functions like <code>map()</code>, <code>filter()</code>, and <code>sorted()</code>:</p><pre><code># Using lambda with map()\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16, 25]\n\n# Using lambda with filter()\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)  # Output: [2, 4]\n\n# Using lambda with sorted()\nstudents = [(\"Alice\", 85), (\"Bob\", 90), (\"Charlie\", 78)]\nsorted_by_score = sorted(students, key=lambda student: student[1], reverse=True)\nprint(sorted_by_score)  # Output: [(\"Bob\", 90), (\"Alice\", 85), (\"Charlie\", 78)]</code></pre><h3>6. Docstrings</h3><p>Docstrings provide documentation for functions and can be accessed using the <code>__doc__</code> attribute:</p><pre><code>def calculate_area(radius):\n    \"\"\"\n    Calculate the area of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle\n    \n    Returns:\n    float: The area of the circle\n    \"\"\"\n    import math\n    return math.pi * radius ** 2</code></pre><p>You can access the docstring using:</p><pre><code>print(calculate_area.__doc__)</code></pre><h3>7. Recursive Functions</h3><p>A recursive function is a function that calls itself:</p><pre><code># Factorial using recursion\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)</code></pre><p>Example usage:</p><pre><code>result = factorial(5)  # 5 * 4 * 3 * 2 * 1 = 120</code></pre>",
    "exercises": [
        {
            "title": "Temperature Converter",
            "description": "Create a function that converts temperatures between Celsius and Fahrenheit. Then write code to test this function with sample temperatures.",
            "hint": "Use the formulas: F = C × 9/5 + 32 and C = (F - 32) × 5/9. Create two separate functions, one for each conversion direction.",
            "startingCode": "# Create your celsius_to_fahrenheit function here\n\n\n# Create your fahrenheit_to_celsius function here\n\n\n# Test your functions with some sample temperatures\n"
        },
        {
            "title": "Prime Number Checker",
            "description": "Write a function that checks if a number is prime (only divisible by 1 and itself). Then test your function with different numbers.",
            "hint": "A number is prime if it's greater than 1 and has no divisors other than 1 and itself. Use a loop to check all possible divisors from 2 to the square root of the number.",
            "startingCode": "# Create your is_prime function here\n\n\n# Test your function with different numbers\n"
        },
        {
            "title": "Word Counter",
            "description": "Create a function that counts the number of words in a given sentence. A word is defined as a sequence of characters separated by spaces.",
            "hint": "You can use the split() method to break a string into a list of words. The length of this list will give you the word count.",
            "startingCode": "# Create your count_words function here\n\n\n# Test your function with different sentences\n"
        }
    ]
} 