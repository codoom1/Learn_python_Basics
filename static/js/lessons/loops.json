{
    "title": "Loops",
    "content": "<h2>Loops in Python</h2><p>Loops allow you to execute a block of code repeatedly. Python has two main types of loops: for loops and while loops.</p><h3>1. For Loops</h3><p>For loops iterate over a sequence (such as a list, tuple, or string) or other iterable objects.</p><h4>Basic For Loop</h4><pre><code># Iterating through a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)</code></pre><p>Output:</p><pre><code>apple\nbanana\ncherry</code></pre><h4>For Loop with range()</h4><p>The <code>range()</code> function generates a sequence of numbers which is often used with for loops:</p><pre><code># Using range() to generate numbers\nfor i in range(5):  # 0 to 4\n    print(i)</code></pre><p>Output:</p><pre><code>0\n1\n2\n3\n4</code></pre><p>You can also specify start, stop, and step parameters:</p><pre><code># range(start, stop, step)\nfor i in range(2, 10, 2):  # 2, 4, 6, 8\n    print(i)</code></pre><p>Output:</p><pre><code>2\n4\n6\n8</code></pre><h4>For Loop with enumerate()</h4><p>The <code>enumerate()</code> function adds a counter to an iterable:</p><pre><code># Using enumerate() to get index and value\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor index, fruit in enumerate(fruits):\n    print(f\"Index {index}: {fruit}\")</code></pre><p>Output:</p><pre><code>Index 0: apple\nIndex 1: banana\nIndex 2: cherry</code></pre><h3>2. While Loops</h3><p>While loops execute a block of code as long as a condition is true.</p><h4>Basic While Loop</h4><pre><code># Simple while loop\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1  # Important: increment the counter to avoid infinite loop</code></pre><p>Output:</p><pre><code>0\n1\n2\n3\n4</code></pre><h4>While Loop with else</h4><p>The <code>else</code> clause is executed when the condition becomes false:</p><pre><code># While loop with else\ncount = 0\nwhile count < 3:\n    print(count)\n    count += 1\nelse:\n    print(\"Loop finished!\")</code></pre><p>Output:</p><pre><code>0\n1\n2\nLoop finished!</code></pre><h3>3. Loop Control Statements</h3><p>Python provides statements to control loop execution:</p><h4>Break Statement</h4><p>The <code>break</code> statement exits the loop completely:</p><pre><code># Using break to exit loop\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)</code></pre><p>Output:</p><pre><code>0\n1\n2\n3\n4</code></pre><h4>Continue Statement</h4><p>The <code>continue</code> statement skips the current iteration and moves to the next one:</p><pre><code># Using continue to skip an iteration\nfor i in range(7):\n    if i == 3 or i == 6:\n        continue\n    print(i)</code></pre><p>Output:</p><pre><code>0\n1\n2\n4\n5</code></pre><h4>Pass Statement</h4><p>The <code>pass</code> statement is a null operation; it does nothing. It's used as a placeholder:</p><pre><code># Using pass as a placeholder\nfor i in range(5):\n    if i == 2:\n        pass  # TODO: implement this later\n    else:\n        print(i)</code></pre><p>Output:</p><pre><code>0\n1\n3\n4</code></pre><h3>4. Nested Loops</h3><p>You can place loops inside other loops:</p><pre><code># Nested loops\nfor i in range(3):  # Outer loop\n    for j in range(2):  # Inner loop\n        print(f\"i={i}, j={j}\")</code></pre><p>Output:</p><pre><code>i=0, j=0\ni=0, j=1\ni=1, j=0\ni=1, j=1\ni=2, j=0\ni=2, j=1</code></pre><h3>5. List Comprehensions</h3><p>List comprehensions provide a concise way to create lists based on existing sequences:</p><pre><code># Creating a list of squares using list comprehension\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)</code></pre><p>Output:</p><pre><code>[1, 4, 9, 16, 25]</code></pre><p>You can also add conditions:</p><pre><code># List comprehension with condition\neven_squares = [x**2 for x in range(1, 11) if x % 2 == 0]\nprint(even_squares)</code></pre><p>Output:</p><pre><code>[4, 16, 36, 64, 100]</code></pre><h3>6. Dictionary Comprehensions</h3><p>Similar to list comprehensions, but create dictionaries:</p><pre><code># Dictionary comprehension\nsquare_dict = {x: x**2 for x in range(1, 6)}\nprint(square_dict)</code></pre><p>Output:</p><pre><code>{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}</code></pre>",
    "exercises": [
        {
            "title": "Sum of Numbers",
            "description": "Write a program that calculates the sum of all numbers from 1 to n using a loop, where n is provided by the user.",
            "hint": "Use a for loop with range() to iterate from 1 to n and keep a running sum by adding each number to a total variable.",
            "startingCode": "# The number to sum up to\nn = 10\n\n# Initialize a variable to hold the sum\ntotal = 0\n\n# Write a loop to calculate the sum\n\n\n# Print the result\n"
        },
        {
            "title": "Pattern Printing",
            "description": "Create a program that prints a right-angled triangle pattern of stars (*) with n rows.",
            "hint": "Use nested loops - an outer loop for rows and an inner loop for columns. The number of stars in each row equals the row number.",
            "startingCode": "# Number of rows\nn = 5\n\n# Write nested loops to print the pattern\n\n"
        },
        {
            "title": "Fibonacci Sequence",
            "description": "Write a program to generate the first n numbers in the Fibonacci sequence (where each number is the sum of the two preceding ones, starting from 0 and 1).",
            "hint": "Initialize the first two Fibonacci numbers (0 and 1), then use a loop to calculate the next numbers by adding the two previous ones.",
            "startingCode": "# Number of Fibonacci numbers to generate\nn = 8\n\n# Initialize the first two numbers\n\n\n# Generate the Fibonacci sequence\n\n\n# Print the sequence\n"
        }
    ]
} 