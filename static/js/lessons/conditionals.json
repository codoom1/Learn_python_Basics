{
    "title": "Conditionals",
    "content": "<h2>Conditional Statements in Python</h2><p>Conditional statements allow you to execute different blocks of code based on whether a condition is true or false.</p><h3>1. if Statement</h3><p>The <code>if</code> statement is used to check if a condition is true, and execute a block of code if it is.</p><pre><code># Basic if statement\nage = 18\nif age >= 18:\n    print(\"You are an adult.\")</code></pre><p>The indented code block under the <code>if</code> statement only runs when the condition is <code>True</code>.</p><h3>2. if-else Statement</h3><p>You can use the <code>else</code> clause to execute a block of code when the condition is false:</p><pre><code># if-else statement\nage = 16\nif age >= 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are a minor.\")</code></pre><h3>3. if-elif-else Statement</h3><p>The <code>elif</code> (else if) clause allows you to check multiple conditions:</p><pre><code># if-elif-else statement\nscore = 85\n\nif score >= 90:\n    print(\"Grade: A\")\nelif score >= 80:\n    print(\"Grade: B\")\nelif score >= 70:\n    print(\"Grade: C\")\nelif score >= 60:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")</code></pre><p>Python checks each condition in order and executes the first block where the condition is true. If no condition is true, it executes the <code>else</code> block.</p><h3>4. Nested if Statements</h3><p>You can place if statements inside other if statements to create nested conditions:</p><pre><code># Nested if statements\nage = 25\nhas_license = True\n\nif age >= 18:\n    print(\"You are an adult.\")\n    if has_license:\n        print(\"You can drive.\")\n    else:\n        print(\"You need a license to drive.\")</code></pre><h3>5. Conditional Expressions (Ternary Operator)</h3><p>Python provides a shorthand way to write simple if-else statements in a single line:</p><pre><code># Ternary operator\nage = 20\nstatus = \"adult\" if age >= 18 else \"minor\"\nprint(status)  # Output: adult</code></pre><h3>6. Logical Operators in Conditions</h3><p>You can combine multiple conditions using logical operators (<code>and</code>, <code>or</code>, <code>not</code>):</p><pre><code># Using logical operators\nage = 25\nincome = 50000\n\nif age >= 18 and income >= 30000:\n    print(\"You qualify for a loan.\")\n\n# Using 'or'\nif age < 18 or income < 30000:\n    print(\"You don't qualify for a loan.\")\n\n# Using 'not'\nhas_criminal_record = False\nif not has_criminal_record:\n    print(\"Background check passed.\")</code></pre><h3>7. Checking Membership</h3><p>The <code>in</code> and <code>not in</code> operators can be used in conditional statements to check membership:</p><pre><code># Checking membership\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nif \"banana\" in fruits:\n    print(\"Yes, banana is a fruit!\")\n\nif \"orange\" not in fruits:\n    print(\"Orange is not in the list of fruits.\")</code></pre><h3>8. Checking Identity</h3><p>The <code>is</code> and <code>is not</code> operators check if two variables refer to the same object:</p><pre><code># Checking identity\nx = [\"apple\", \"banana\"]\ny = [\"apple\", \"banana\"]\nz = x\n\nif x is z:\n    print(\"x and z refer to the same object.\")\n\nif x is not y:\n    print(\"x and y are different objects.\")</code></pre><h3>9. Truth Value Testing</h3><p>In Python, the following values are considered <code>False</code> in a boolean context:</p><ul><li>False</li><li>None</li><li>Zero of any numeric type: 0, 0.0, 0j</li><li>Empty sequences: '', [], ()</li><li>Empty mappings: {}</li><li>Objects of classes which define __bool__() or __len__() methods that return 0 or False</li></ul><p>All other values are considered <code>True</code>.</p><pre><code># Truth value testing\nname = \"\"\nif name:\n    print(\"Hello, \" + name)\nelse:\n    print(\"Name is empty.\")</code></pre>",
    "exercises": [
        {
            "title": "Age Classifier",
            "description": "Write a program that classifies people into different age groups: child (0-12), teenager (13-19), adult (20-64), or senior (65+).",
            "hint": "Use if-elif-else statements to check the age ranges. Start with the condition for determining if someone is a child, then teenager, and so on.",
            "startingCode": "# Get age from user (you can change this value for testing)\nage = 25\n\n# Classify the age\n\n\n# Print the classification\n"
        },
        {
            "title": "Grade Calculator",
            "description": "Create a program that takes a numerical score (0-100) and converts it to a letter grade: A (90-100), B (80-89), C (70-79), D (60-69), F (0-59).",
            "hint": "Use if-elif-else statements with comparison operators to check score ranges. Start with the highest grade range first.",
            "startingCode": "# Get score from user (you can change this value for testing)\nscore = 85\n\n# Calculate the grade\n\n\n# Print the result\n"
        },
        {
            "title": "Leap Year Checker",
            "description": "Write a program to determine if a given year is a leap year. A leap year is divisible by 4, except for century years which must be divisible by 400.",
            "hint": "Use the modulus operator (%) to check divisibility. A leap year is divisible by 4, but if it's divisible by 100, it must also be divisible by 400.",
            "startingCode": "# Get year from user (you can change this value for testing)\nyear = 2024\n\n# Check if it's a leap year\n\n\n# Print the result\n"
        }
    ]
} 