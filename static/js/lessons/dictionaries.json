{
    "title": "Dictionaries",
    "content": "<h2>Dictionaries in Python</h2><p>Dictionaries are unordered, changeable (mutable) collections of key-value pairs. They are optimized for retrieving data when you know the key.</p><h3>1. Creating Dictionaries</h3><p>There are several ways to create dictionaries in Python:</p><pre><code># Empty dictionary\nempty_dict = {}\n\n# Dictionary with key-value pairs\nperson = {\n    \"name\": \"John\", \n    \"age\": 30, \n    \"city\": \"New York\"\n}\n\n# Using the dict() constructor\nanother_dict = dict(name=\"Alice\", age=25, city=\"London\")\n\n# Dictionary with mixed key types (not recommended, but possible)\nmixed_keys = {\"name\": \"Bob\", 42: \"Answer\", (1, 2): \"Tuple key\"}</code></pre><h3>2. Accessing Dictionary Items</h3><p>You can access the items of a dictionary by referring to its key:</p><pre><code>person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Access values by key\nprint(person[\"name\"])  # Output: John\nprint(person[\"age\"])   # Output: 30\n\n# Using the get() method (safer, returns None if key doesn't exist)\nprint(person.get(\"name\"))     # Output: John\nprint(person.get(\"country\"))  # Output: None\nprint(person.get(\"country\", \"USA\"))  # Output: USA (default value if key doesn't exist)</code></pre><h3>3. Modifying Dictionaries</h3><p>Dictionaries are mutable, so you can change, add, or remove key-value pairs:</p><pre><code>person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Change values\nperson[\"age\"] = 31\nprint(person)  # Output: {'name': 'John', 'age': 31, 'city': 'New York'}\n\n# Add new key-value pairs\nperson[\"email\"] = \"john@example.com\"\nprint(person)  # Output: {'name': 'John', 'age': 31, 'city': 'New York', 'email': 'john@example.com'}\n\n# Update multiple key-value pairs\nperson.update({\"age\": 32, \"job\": \"Developer\"})\nprint(person)  # Output: {'name': 'John', 'age': 32, 'city': 'New York', 'email': 'john@example.com', 'job': 'Developer'}</code></pre><h3>4. Removing Items</h3><p>There are several ways to remove items from a dictionary:</p><pre><code>person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"email\": \"john@example.com\"}\n\n# Remove a specific item\ndel person[\"email\"]\nprint(person)  # Output: {'name': 'John', 'age': 30, 'city': 'New York'}\n\n# Remove and return a specific item\nage = person.pop(\"age\")\nprint(age)      # Output: 30\nprint(person)   # Output: {'name': 'John', 'city': 'New York'}\n\n# Remove and return the last inserted item\nlast_item = person.popitem()  # Returns the last inserted key-value pair as a tuple\nprint(last_item)  # Output: ('city', 'New York')\nprint(person)     # Output: {'name': 'John'}\n\n# Clear all items\nperson.clear()\nprint(person)  # Output: {}</code></pre><h3>5. Dictionary Methods</h3><p>Python dictionaries come with several useful methods:</p><pre><code>person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Get all keys\nkeys = person.keys()\nprint(keys)  # Output: dict_keys(['name', 'age', 'city'])\n\n# Get all values\nvalues = person.values()\nprint(values)  # Output: dict_values(['John', 30, 'New York'])\n\n# Get all key-value pairs as tuples\nitems = person.items()\nprint(items)  # Output: dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n\n# Check if key exists\nprint(\"name\" in person)    # Output: True\nprint(\"country\" in person)  # Output: False\n\n# Copy a dictionary\nperson_copy = person.copy()\n# Or: person_copy = dict(person)</code></pre><h3>6. Looping Through Dictionaries</h3><p>You can loop through a dictionary in different ways:</p><pre><code>person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Loop through keys (default)\nfor key in person:\n    print(key)  # Output: name, age, city\n\n# Loop through keys explicitly\nfor key in person.keys():\n    print(key)  # Output: name, age, city\n\n# Loop through values\nfor value in person.values():\n    print(value)  # Output: John, 30, New York\n\n# Loop through key-value pairs\nfor key, value in person.items():\n    print(f\"{key}: {value}\")  # Output: name: John, age: 30, city: New York</code></pre><h3>7. Nested Dictionaries</h3><p>Dictionaries can contain other dictionaries, creating nested structures:</p><pre><code>users = {\n    \"user1\": {\n        \"name\": \"John\",\n        \"age\": 30,\n        \"scores\": [85, 90, 78]\n    },\n    \"user2\": {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"scores\": [92, 88, 95]\n    }\n}\n\n# Accessing nested items\nprint(users[\"user1\"][\"name\"])      # Output: John\nprint(users[\"user2\"][\"scores\"][1])  # Output: 88</code></pre><h3>8. Dictionary Comprehensions</h3><p>Similar to list comprehensions, dictionary comprehensions provide a concise way to create dictionaries:</p><pre><code># Create a dictionary of squares\nsquares = {x: x**2 for x in range(1, 6)}\nprint(squares)  # Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Dictionary comprehension with condition\neven_squares = {x: x**2 for x in range(1, 11) if x % 2 == 0}\nprint(even_squares)  # Output: {2: 4, 4: 16, 6: 36, 8: 64, 10: 100}\n\n# Convert two lists into a dictionary\nkeys = [\"name\", \"age\", \"city\"]\nvalues = [\"Bob\", 28, \"Chicago\"]\nperson = {keys[i]: values[i] for i in range(len(keys))}\nprint(person)  # Output: {'name': 'Bob', 'age': 28, 'city': 'Chicago'}</code></pre><h3>9. Common Use Cases for Dictionaries</h3><ul><li><strong>Counting occurrences:</strong><pre><code>text = \"hello world hello python world python\"\nword_count = {}\n\nfor word in text.split():\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\nprint(word_count)  # Output: {'hello': 2, 'world': 2, 'python': 2}</code></pre></li><li><strong>Grouping data:</strong><pre><code>students = [\n    {\"name\": \"Alice\", \"grade\": \"A\"},\n    {\"name\": \"Bob\", \"grade\": \"B\"},\n    {\"name\": \"Charlie\", \"grade\": \"A\"},\n    {\"name\": \"David\", \"grade\": \"C\"}\n]\n\ngrouped_by_grade = {}\nfor student in students:\n    grade = student[\"grade\"]\n    if grade not in grouped_by_grade:\n        grouped_by_grade[grade] = []\n    grouped_by_grade[grade].append(student[\"name\"])\n\nprint(grouped_by_grade)  # Output: {'A': ['Alice', 'Charlie'], 'B': ['Bob'], 'C': ['David']}</code></pre></li><li><strong>Using dictionaries as a switch/case alternative:</strong><pre><code>def add(x, y): return x + y\ndef subtract(x, y): return x - y\ndef multiply(x, y): return x * y\ndef divide(x, y): return x / y if y != 0 else \"Error: Division by zero\"\n\noperations = {\n    \"+\": add,\n    \"-\": subtract,\n    \"*\": multiply,\n    \"/\": divide\n}\n\n# Example usage\nx, op, y = 10, \"+\", 5\nresult = operations[op](x, y)\nprint(result)  # Output: 15</code></pre></li></ul>",
    "exercises": [
        {
            "title": "Contact Book",
            "description": "Create a simple contact book using a dictionary. Add three contacts with names and phone numbers, update one contact's number, delete one contact, and print all contacts.",
            "hint": "Use a dictionary where the keys are the names and the values are the phone numbers. Use standard dictionary operations to add, update, and delete contacts.",
            "startingCode": "# Create an empty contacts dictionary\ncontacts = {}\n\n# Add three contacts\n\n\n# Update one contact's phone number\n\n\n# Delete one contact\n\n\n# Print all contacts in a nice format\n"
        },
        {
            "title": "Word Frequency Counter",
            "description": "Write a program that counts the frequency of each word in a given text string. Convert all words to lowercase and ignore punctuation.",
            "hint": "Split the text into words using the split() method. Create a dictionary where keys are words and values are counts. For each word, increment its count in the dictionary.",
            "startingCode": "# Text to analyze\ntext = \"Python is amazing. Python is versatile and Python is easy to learn.\"\n\n# Process the text and count word frequencies\n\n\n# Print the word frequencies in a format like \"word: count\"\n"
        },
        {
            "title": "Student Records",
            "description": "Create a nested dictionary to store student records. Each student should have a name, age, and a list of grades. Add three students, calculate each student's average grade, and print a summary of all students.",
            "hint": "Create a dictionary where keys are student IDs and values are dictionaries containing name, age, and grades. Use a loop to calculate the average grade for each student.",
            "startingCode": "# Create an empty students dictionary\nstudents = {}\n\n# Add three students with their details\n\n\n# Calculate and print each student's average grade\n\n\n# Print a summary of all students\n"
        }
    ]
} 