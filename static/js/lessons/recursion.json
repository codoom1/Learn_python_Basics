{
    "title": "Recursion",
    "content": "<h2>Recursion in Python</h2><p>Recursion is a programming technique where a function calls itself to solve a problem. It's a powerful approach for solving problems that can be broken down into smaller, similar subproblems.</p><h3>Basic Concept</h3><p>A recursive function has two components: a base case that stops recursion and a recursive case.</p><pre><code>def countdown(n):\n    # Base case\n    if n <= 0:\n        print(\"Blastoff!\")\n    # Recursive case\n    else:\n        print(n)\n        countdown(n - 1)\n\ncountdown(5)</code></pre><h3>Common Examples</h3><pre><code>def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))  # 120</code></pre><p>Recursion is useful for tree traversal, divide-and-conquer algorithms, and problems with naturally recursive structures.</p>",
    "exercises": [
        {
            "title": "Recursive Sum",
            "description": "Write a recursive function that calculates the sum of all numbers from 1 to n.",
            "hint": "The base case could be when n is 0 or 1. For the recursive case, add n to the sum of numbers from 1 to n-1.",
            "startingCode": "# Define your recursive sum function\ndef recursive_sum(n):\n    # Base case\n    \n    # Recursive case\n    \n\n# Test your function with different values\nprint(recursive_sum(5))  # Expected output: 15 (1+2+3+4+5)\nprint(recursive_sum(10))  # Expected output: 55"
        },
        {
            "title": "Palindrome Checker",
            "description": "Create a recursive function to check if a string is a palindrome (reads the same forward and backward, ignoring spaces and capitalization).",
            "hint": "Compare the first and last characters. If they match, recursively check if the substring (excluding first and last characters) is a palindrome.",
            "startingCode": "# Define your recursive palindrome checker function\ndef is_palindrome(s):\n    # Remove spaces and convert to lowercase for consistent comparison\n    s = s.replace(\" \", \"\").lower()\n    \n    # Base case\n    \n    # Recursive case\n    \n\n# Test your function with different strings\nprint(is_palindrome(\"racecar\"))  # Expected output: True\nprint(is_palindrome(\"hello\"))    # Expected output: False\nprint(is_palindrome(\"A man a plan a canal Panama\"))  # Expected output: True"
        },
        {
            "title": "Recursive Binary Search",
            "description": "Implement a recursive binary search algorithm to find the position of a target value in a sorted array.",
            "hint": "The base cases are when the item is found or when the search space is empty. For the recursive case, compare the target to the middle element and recursively search either the left or right half accordingly.",
            "startingCode": "# Define your recursive binary search function\ndef binary_search(arr, target, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    \n    # Base case(s)\n    \n    # Find the middle element\n    \n    # Recursive cases\n    \n\n# Test your function\nsorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nprint(binary_search(sorted_list, 7))   # Expected output: 3 (index of 7)\nprint(binary_search(sorted_list, 10))  # Expected output: -1 (not found)"
        }
    ]
} 