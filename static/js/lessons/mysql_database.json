{
    "title": "MySQL Database",
    "content": "<h2>MySQL Database in Python</h2><p>MySQL is one of the most popular open-source relational database management systems. This lesson focuses on using MySQL with Python through the mysql-connector-python library.</p><h3>1. Setting Up MySQL</h3><h4>Installing MySQL Connector</h4><pre><code># Install MySQL connector\npip install mysql-connector-python</code></pre><h4>Basic MySQL Concepts</h4><ul><li><strong>Tables</strong>: Structured data storage with rows and columns</li><li><strong>Primary Keys</strong>: Unique identifiers for records</li><li><strong>Foreign Keys</strong>: References to other tables</li><li><strong>Indexes</strong>: Improve query performance</li><li><strong>Transactions</strong>: Ensure data integrity</li></ul><h3>2. Working with MySQL</h3><h4>Connecting to MySQL</h4><pre><code>import mysql.connector\n\n# Establish connection\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\n\n# Create a cursor object\ncursor = conn.cursor()\n\n# Always close connection when done\ncursor.close()\nconn.close()</code></pre><h4>Creating Tables</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\n# Create a table\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS employees (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    department VARCHAR(100),\n    salary DECIMAL(10, 2)\n)\n\"\"\"\ncursor.execute(create_table_query)\nconn.commit()\n\ncursor.close()\nconn.close()</code></pre><h4>Inserting Data</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\n# Insert a single record\ninsert_query = \"\"\"\nINSERT INTO employees (name, email, department, salary)\nVALUES (%s, %s, %s, %s)\n\"\"\"\ndata = (\"John Doe\", \"john@example.com\", \"IT\", 75000.00)\ncursor.execute(insert_query, data)\n\n# Insert multiple records\nmulti_data = [\n    (\"Jane Smith\", \"jane@example.com\", \"HR\", 65000.00),\n    (\"Mike Johnson\", \"mike@example.com\", \"Marketing\", 68000.00)\n]\ncursor.executemany(insert_query, multi_data)\n\nconn.commit()  # Commit changes\nprint(f\"{cursor.rowcount} record(s) inserted.\")</code></pre><h4>Querying Data</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\n# Select all employees\nselect_query = \"SELECT * FROM employees\"\ncursor.execute(select_query)\nemployees = cursor.fetchall()\n\nfor employee in employees:\n    print(employee)\n\n# Select with filtering\nselect_filtered = \"SELECT name, email FROM employees WHERE department = %s\"\ncursor.execute(select_filtered, (\"IT\",))\nit_employees = cursor.fetchall()\n\nfor employee in it_employees:\n    print(employee)</code></pre><h4>Updating Data</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\n# Update salary for an employee\nupdate_query = \"UPDATE employees SET salary = %s WHERE name = %s\"\ncursor.execute(update_query, (80000.00, \"John Doe\"))\nconn.commit()\n\nprint(f\"{cursor.rowcount} record(s) updated.\")</code></pre><h4>Deleting Data</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\n# Delete an employee\ndelete_query = \"DELETE FROM employees WHERE name = %s\"\ncursor.execute(delete_query, (\"Mike Johnson\",))\nconn.commit()\n\nprint(f\"{cursor.rowcount} record(s) deleted.\")</code></pre><h4>Transactions</h4><pre><code>import mysql.connector\n\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\ncursor = conn.cursor()\n\ntry:\n    # Start transaction\n    cursor.execute(\"START TRANSACTION\")\n    \n    # Multiple operations\n    cursor.execute(\"UPDATE accounts SET balance = balance - 100 WHERE id = 1\")\n    cursor.execute(\"UPDATE accounts SET balance = balance + 100 WHERE id = 2\")\n    \n    # Commit if successful\n    conn.commit()\nexcept Exception as e:\n    # Rollback on error\n    conn.rollback()\n    print(f\"Error occurred: {e}\")\nfinally:\n    cursor.close()\n    conn.close()</code></pre><h4>Connection Pooling</h4><pre><code>from mysql.connector import pooling\n\n# Create a connection pool\npool = pooling.MySQLConnectionPool(\n    pool_name=\"mypool\",\n    pool_size=5,\n    host=\"localhost\",\n    user=\"username\",\n    password=\"password\",\n    database=\"mydatabase\"\n)\n\n# Get a connection from the pool\nconn = pool.get_connection()\ncursor = conn.cursor()\n\n# Execute query\ncursor.execute(\"SELECT * FROM employees LIMIT 5\")\nresult = cursor.fetchall()\nprint(result)\n\n# Return the connection to the pool\ncursor.close()\nconn.close()</code></pre>",
    "exercises": [
        {
            "title": "Employee Management System",
            "description": "Create a Python script that implements a simple employee management system using MySQL. Include functions to add employees, update salaries, and generate department-wise reports.",
            "hint": "Use mysql-connector-python and implement CRUD operations. Remember to use parameterized queries and proper error handling.",
            "startingCode": "import mysql.connector\nfrom typing import List, Tuple\n\nclass EmployeeManager:\n    def __init__(self, connection_params: dict):\n        # Initialize connection to MySQL\n        pass\n    \n    def create_tables(self):\n        # Create necessary tables\n        pass\n    \n    def add_employee(self, name: str, email: str, department: str, salary: float) -> int:\n        # Add a new employee and return their ID\n        pass\n    \n    def update_salary(self, employee_id: int, new_salary: float) -> bool:\n        # Update an employee's salary\n        pass\n    \n    def get_department_report(self) -> List[Tuple]:\n        # Generate a report showing department-wise employee count and average salary\n        pass\n    \n    def close(self):\n        # Close the database connection\n        pass\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        # Connection parameters\n        params = {\n            \"host\": \"localhost\",\n            \"user\": \"username\",\n            \"password\": \"password\",\n            \"database\": \"employees\"\n        }\n        \n        manager = EmployeeManager(params)\n        manager.create_tables()\n        \n        # Add employees\n        emp1_id = manager.add_employee(\"John Doe\", \"john@example.com\", \"IT\", 75000.00)\n        emp2_id = manager.add_employee(\"Jane Smith\", \"jane@example.com\", \"HR\", 65000.00)\n        \n        # Update salary\n        manager.update_salary(emp1_id, 80000.00)\n        \n        # Generate report\n        report = manager.get_department_report()\n        print(\"Department Report:\")\n        for dept_name, emp_count, avg_salary in report:\n            print(f\"{dept_name}: {emp_count} employees, Average salary: ${avg_salary:.2f}\")\n        \n        manager.close()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
        },
        {
            "title": "Transaction Manager",
            "description": "Implement a transaction manager that handles financial transactions using MySQL. Include features for recording transactions, maintaining account balances, and generating transaction history.",
            "hint": "Use MySQL transactions to ensure data consistency. Implement proper error handling and rollback mechanisms.",
            "startingCode": "import mysql.connector\nfrom datetime import datetime\n\nclass TransactionManager:\n    def __init__(self, connection_params: dict):\n        # Initialize connection\n        pass\n    \n    def create_tables(self):\n        # Create accounts and transactions tables\n        pass\n    \n    def create_account(self, account_holder: str, initial_balance: float) -> int:\n        # Create a new account\n        pass\n    \n    def perform_transaction(self, from_account: int, to_account: int, amount: float) -> bool:\n        # Perform a transaction between accounts\n        pass\n    \n    def get_balance(self, account_id: int) -> float:\n        # Get current balance of an account\n        pass\n    \n    def get_transaction_history(self, account_id: int) -> list:\n        # Get transaction history for an account\n        pass\n    \n    def close(self):\n        # Close connection\n        pass\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        params = {\n            \"host\": \"localhost\",\n            \"user\": \"username\",\n            \"password\": \"password\",\n            \"database\": \"banking\"\n        }\n        \n        manager = TransactionManager(params)\n        manager.create_tables()\n        \n        # Create accounts\n        account1 = manager.create_account(\"John Doe\", 1000.00)\n        account2 = manager.create_account(\"Jane Smith\", 500.00)\n        \n        # Perform transaction\n        success = manager.perform_transaction(account1, account2, 200.00)\n        \n        if success:\n            # Check balances\n            balance1 = manager.get_balance(account1)\n            balance2 = manager.get_balance(account2)\n            print(f\"New balances: Account1: ${balance1:.2f}, Account2: ${balance2:.2f}\")\n            \n            # Get transaction history\n            history = manager.get_transaction_history(account1)\n            print(\"Transaction History:\")\n            for transaction in history:\n                print(transaction)\n        \n        manager.close()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
        },
        {
            "title": "Connection Pool Implementation",
            "description": "Create a connection pool manager for MySQL that efficiently handles multiple database connections. Implement methods for executing queries using pooled connections and proper connection lifecycle management.",
            "hint": "Use MySQL Connector/Python's built-in connection pooling. Implement context managers for safe connection handling.",
            "startingCode": "from mysql.connector import pooling\nfrom contextlib import contextmanager\nfrom typing import Any, List\n\nclass MySQLPoolManager:\n    def __init__(self, pool_name: str, pool_size: int, **db_params):\n        # Initialize the connection pool\n        pass\n    \n    @contextmanager\n    def get_connection(self):\n        # Get a connection from the pool\n        # Use context manager for safe handling\n        pass\n    \n    def execute_query(self, query: str, params: tuple = None) -> List[Any]:\n        # Execute a query using a connection from the pool\n        pass\n    \n    def execute_many(self, query: str, params: list) -> int:\n        # Execute multiple queries using the same connection\n        pass\n    \n    def close_pool(self):\n        # Close all connections in the pool\n        pass\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        # Create pool manager\n        db_params = {\n            \"host\": \"localhost\",\n            \"user\": \"username\",\n            \"password\": \"password\",\n            \"database\": \"testdb\"\n        }\n        \n        pool_manager = MySQLPoolManager(\"mypool\", 5, **db_params)\n        \n        # Execute some queries\n        create_table = \"\"\"\n        CREATE TABLE IF NOT EXISTS test_table (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            data VARCHAR(100)\n        )\"\"\"\n        pool_manager.execute_query(create_table)\n        \n        # Insert data\n        insert_data = \"INSERT INTO test_table (data) VALUES (%s)\"\n        data = [(\"test1\",), (\"test2\",), (\"test3\",)]\n        rows_affected = pool_manager.execute_many(insert_data, data)\n        print(f\"Inserted {rows_affected} rows\")\n        \n        # Query data\n        results = pool_manager.execute_query(\"SELECT * FROM test_table\")\n        print(\"Results:\", results)\n        \n        # Close pool\n        pool_manager.close_pool()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
        }
    ]
}