{
    "title": "Operators and Expressions",
    "content": "<h2>Python Operators</h2><p>Operators are special symbols that perform operations on variables and values. Python supports a variety of operators.</p><h3>1. Arithmetic Operators</h3><p>These operators are used to perform mathematical operations:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Name</th><th>Example</th><th>Result</th></tr><tr><td>+</td><td>Addition</td><td>5 + 3</td><td>8</td></tr><tr><td>-</td><td>Subtraction</td><td>5 - 3</td><td>2</td></tr><tr><td>*</td><td>Multiplication</td><td>5 * 3</td><td>15</td></tr><tr><td>/</td><td>Division</td><td>5 / 3</td><td>1.6666...</td></tr><tr><td>%</td><td>Modulus</td><td>5 % 3</td><td>2</td></tr><tr><td>**</td><td>Exponentiation</td><td>5 ** 3</td><td>125</td></tr><tr><td>//</td><td>Floor division</td><td>5 // 3</td><td>1</td></tr></table><pre><code># Examples of arithmetic operators\nx = 10\ny = 3\n\naddition = x + y      # 13\nsubtraction = x - y   # 7\nmultiply = x * y      # 30\ndivision = x / y      # 3.3333...\nmodulus = x % y       # 1\nexponent = x ** y     # 1000\nfloor_div = x // y    # 3</code></pre><h3>2. Comparison Operators</h3><p>These operators are used to compare values:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Name</th><th>Example</th><th>Result</th></tr><tr><td>==</td><td>Equal</td><td>5 == 3</td><td>False</td></tr><tr><td>!=</td><td>Not equal</td><td>5 != 3</td><td>True</td></tr><tr><td>&gt;</td><td>Greater than</td><td>5 &gt; 3</td><td>True</td></tr><tr><td>&lt;</td><td>Less than</td><td>5 &lt; 3</td><td>False</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td><td>5 &gt;= 3</td><td>True</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td><td>5 &lt;= 3</td><td>False</td></tr></table><pre><code># Examples of comparison operators\nx = 10\ny = 3\n\nequals = x == y      # False\nnot_equals = x != y  # True\ngreater = x > y      # True\nless = x < y         # False\ngreater_eq = x >= y  # True\nless_eq = x <= y     # False</code></pre><h3>3. Logical Operators</h3><p>These operators are used to combine conditional statements:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Description</th><th>Example</th><th>Result</th></tr><tr><td>and</td><td>Returns True if both statements are true</td><td>x &gt; 0 and x &lt; 10</td><td>True if x is between 0 and 10</td></tr><tr><td>or</td><td>Returns True if one of the statements is true</td><td>x &lt; 0 or x &gt; 10</td><td>True if x is less than 0 or greater than 10</td></tr><tr><td>not</td><td>Reverse the result, returns False if the result is true</td><td>not(x &gt; 0 and x &lt; 10)</td><td>False if x is between 0 and 10</td></tr></table><pre><code># Examples of logical operators\nx = 5\n\nresult1 = x > 0 and x < 10   # True\nresult2 = x < 0 or x > 10    # False\nresult3 = not(x > 0)         # False</code></pre><h3>4. Assignment Operators</h3><p>These operators are used to assign values to variables:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Example</th><th>Same As</th></tr><tr><td>=</td><td>x = 5</td><td>x = 5</td></tr><tr><td>+=</td><td>x += 3</td><td>x = x + 3</td></tr><tr><td>-=</td><td>x -= 3</td><td>x = x - 3</td></tr><tr><td>*=</td><td>x *= 3</td><td>x = x * 3</td></tr><tr><td>/=</td><td>x /= 3</td><td>x = x / 3</td></tr><tr><td>%=</td><td>x %= 3</td><td>x = x % 3</td></tr><tr><td>**=</td><td>x **= 3</td><td>x = x ** 3</td></tr><tr><td>//=</td><td>x //= 3</td><td>x = x // 3</td></tr></table><pre><code># Examples of assignment operators\nx = 10\nx += 5   # x = 15\nx -= 3   # x = 12\nx *= 2   # x = 24\nx /= 4   # x = 6.0\nx %= 4   # x = 2.0\nx **= 2  # x = 4.0\nx //= 2  # x = 2.0</code></pre><h3>5. Identity Operators</h3><p>These operators are used to compare objects, not if they are equal, but if they are actually the same object, with the same memory location:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td>is</td><td>Returns True if both variables are the same object</td><td>x is y</td></tr><tr><td>is not</td><td>Returns True if both variables are not the same object</td><td>x is not y</td></tr></table><pre><code># Examples of identity operators\nx = [\"apple\", \"banana\"]\ny = [\"apple\", \"banana\"]\nz = x\n\nprint(x is z)     # True - x and z refer to the same object\nprint(x is y)     # False - x and y are equal but not the same object\nprint(x is not y) # True - x and y are not the same object</code></pre><h3>6. Membership Operators</h3><p>These operators are used to test if a sequence is presented in an object:</p><table class=\"operator-table\"><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td>in</td><td>Returns True if a value is found in the sequence</td><td>x in y</td></tr><tr><td>not in</td><td>Returns True if a value is not found in the sequence</td><td>x not in y</td></tr></table><pre><code># Examples of membership operators\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nprint(\"banana\" in fruits)      # True\nprint(\"orange\" in fruits)      # False\nprint(\"orange\" not in fruits)  # True</code></pre><h2>Operator Precedence</h2><p>Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first.</p><ol><li>Parentheses <code>()</code></li><li>Exponentiation <code>**</code></li><li>Unary plus, unary minus, and bitwise NOT <code>+x, -x, ~x</code></li><li>Multiplication, division, floor division, and modulus <code>*, /, //, %</code></li><li>Addition and subtraction <code>+, -</code></li><li>Bitwise shifts <code>&lt;&lt;, &gt;&gt;</code></li><li>Bitwise AND <code>&</code></li><li>Bitwise XOR <code>^</code></li><li>Bitwise OR <code>|</code></li><li>Comparison operators <code>==, !=, &gt;, &gt;=, &lt;, &lt;=, is, is not, in, not in</code></li><li>Logical NOT <code>not</code></li><li>Logical AND <code>and</code></li><li>Logical OR <code>or</code></li></ol><pre><code># Example of operator precedence\nresult = 2 + 3 * 4      # 14, not 20 - multiplication has higher precedence\nresult = (2 + 3) * 4    # 20 - parentheses have highest precedence</code></pre>",
    "exercises": [
        {
            "title": "Arithmetic Calculations",
            "description": "Perform various arithmetic operations to calculate the final price of a product. Given: Base price = $100, Discount rate = 20%, Tax rate = 8%.",
            "hint": "First calculate the discount amount (base_price * discount_rate), then subtract it from the base price. Finally add the tax (discounted_price * tax_rate).",
            "startingCode": "# Given values\nbase_price = 100\ndiscount_rate = 0.20  # 20%\ntax_rate = 0.08  # 8%\n\n# Calculate discount amount\n\n\n# Calculate discounted price\n\n\n# Calculate tax amount\n\n\n# Calculate final price\n\n\n# Print the result\n"
        },
        {
            "title": "Logical Conditions",
            "description": "Write a program that checks if a number is divisible by both 3 and 5, by 3 only, by 5 only, or by neither.",
            "hint": "Use the modulus operator (%) to check divisibility. If num % divisor == 0, then num is divisible by divisor.",
            "startingCode": "# Check this number\nnum = 15\n\n# Check divisibility\n\n\n# Print result\n"
        },
        {
            "title": "Membership and Identity",
            "description": "Create two lists with similar values, then demonstrate the difference between membership ('in') and identity ('is') operators.",
            "hint": "Two lists with the same values are equal (==) but not identical (is). The 'in' operator checks if an element exists in a list.",
            "startingCode": "# Create two lists with the same values\nlist1 = [1, 2, 3, 4, 5]\n\n# Create another list with the same values\n\n\n# Create a reference to list1\n\n\n# Check and print equality (==)\n\n\n# Check and print identity (is) between list1 and list2\n\n\n# Check and print identity (is) between list1 and list3\n\n\n# Check if a value is in list1\n\n"
        }
    ]
} 