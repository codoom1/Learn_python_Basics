{
    "title": "Recursion",
    "content": "<h2>Recursion in Python</h2><p>Recursion is a programming technique where a function calls itself to solve a problem. It's a powerful approach for solving problems that can be broken down into smaller, similar subproblems.</p><h3>1. Basic Concept of Recursion</h3><p>A recursive function has two main components:</p><ul><li><strong>Base case:</strong> A condition that stops the recursion</li><li><strong>Recursive case:</strong> A call to the same function with a modified argument that brings it closer to the base case</li></ul><pre><code># Simple example of a recursive function
def countdown(n):
    # Base case
    if n <= 0:
        print(\"Blastoff!\")
    # Recursive case
    else:
        print(n)
        countdown(n - 1)  # Function calls itself

countdown(5)</code></pre><p>Output:</p><pre><code>5
4
3
2
1
Blastoff!</code></pre><h3>2. How Recursion Works</h3><p>When a function calls itself, a new instance of the function is created with its own set of parameters and local variables. Each recursive call is pushed onto the call stack, and when the base case is reached, the calls are resolved in reverse order.</p><pre><code># Visualizing the call stack for factorial
def factorial(n):
    # Base case
    if n == 0 or n == 1:
        return 1
    # Recursive case
    else:
        return n * factorial(n - 1)

# For factorial(4), the call stack would look like:
# factorial(4) -> 4 * factorial(3)
# factorial(3) -> 3 * factorial(2)
# factorial(2) -> 2 * factorial(1)
# factorial(1) -> 1 (base case)
# Then it unwinds:
# factorial(2) = 2 * 1 = 2
# factorial(3) = 3 * 2 = 6
# factorial(4) = 4 * 6 = 24

print(factorial(4))  # Output: 24</code></pre><h3>3. Common Recursive Algorithms</h3><h4>Factorial Calculation</h4><pre><code>def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

print(factorial(5))  # Output: 120</code></pre><h4>Fibonacci Sequence</h4><pre><code>def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Generate the first 10 Fibonacci numbers
for i in range(10):
    print(fibonacci(i), end=\" \")  # Output: 0 1 1 2 3 5 8 13 21 34</code></pre><h4>Calculating Power</h4><pre><code>def power(base, exponent):
    if exponent == 0:
        return 1
    else:
        return base * power(base, exponent - 1)

print(power(2, 4))  # Output: 16 (2^4 = 16)</code></pre><h4>Greatest Common Divisor (GCD)</h4><pre><code>def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

print(gcd(48, 18))  # Output: 6</code></pre><h3>4. Recursive Data Structures</h3><p>Some data structures naturally lend themselves to recursive processing:</p><h4>Binary Trees</h4><pre><code>class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def inorder_traversal(node):
    if node:
        # Traverse left subtree
        inorder_traversal(node.left)
        # Visit node
        print(node.value, end=\" \")
        # Traverse right subtree
        inorder_traversal(node.right)

# Create a simple binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

inorder_traversal(root)  # Output: 4 2 5 1 3</code></pre><h4>Directory Traversal</h4><pre><code>import os

def list_files(directory):
    for item in os.listdir(directory):
        path = os.path.join(directory, item)
        if os.path.isfile(path):
            print(f\"File: {path}\")
        elif os.path.isdir(path):
            print(f\"Directory: {path}\")
            # Recursive call for subdirectory
            list_files(path)</code></pre><h3>5. Advantages and Disadvantages of Recursion</h3><h4>Advantages</h4><ul><li><strong>Elegant code:</strong> Often results in cleaner, more readable code for certain problems</li><li><strong>Natural fit:</strong> Some problems are inherently recursive (tree traversal, fractals)</li><li><strong>Divide and conquer:</strong> Breaks down complex problems into simpler subproblems</li></ul><h4>Disadvantages</h4><ul><li><strong>Memory usage:</strong> Each recursive call adds a frame to the call stack, which can lead to stack overflow for deep recursions</li><li><strong>Performance:</strong> Can be slower than iterative solutions due to function call overhead</li><li><strong>Complexity:</strong> Can be harder to trace and debug</li></ul><h3>6. Optimizing Recursive Functions</h3><h4>Tail Recursion</h4><p>A special form of recursion where the recursive call is the last operation in the function. Some languages optimize tail-recursive calls, though Python doesn't currently implement this optimization.</p><pre><code># Factorial with tail recursion
def factorial_tail(n, accumulator=1):
    if n == 0 or n == 1:
        return accumulator
    else:
        return factorial_tail(n - 1, n * accumulator)

print(factorial_tail(5))  # Output: 120</code></pre><h4>Memoization</h4><p>Caching the results of expensive function calls to avoid redundant calculations:</p><pre><code># Fibonacci with memoization
def fibonacci_memo(n, memo={}):
    if n in memo:
        return memo[n]
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)
        return memo[n]

# Much faster for large values of n
print(fibonacci_memo(35))  # Output: 9227465</code></pre><h3>7. Converting Recursion to Iteration</h3><p>Many recursive solutions can be rewritten as iterative ones, often with better performance:</p><pre><code># Recursive factorial
def factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial_recursive(n - 1)

# Iterative factorial
def factorial_iterative(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

print(factorial_recursive(5))  # Output: 120
print(factorial_iterative(5))  # Output: 120</code></pre><h3>8. Recursion vs. Iteration</h3><p>When deciding between recursion and iteration, consider:</p><table class=\"operator-table\"><tr><th>Aspect</th><th>Recursion</th><th>Iteration</th></tr><tr><td>Code Clarity</td><td>Often clearer for inherently recursive problems</td><td>Usually simpler for linear processes</td></tr><tr><td>Memory Usage</td><td>Higher (call stack)</td><td>Lower</td></tr><tr><td>Performance</td><td>Usually slower due to function call overhead</td><td>Generally faster</td></tr><tr><td>Debugging</td><td>Can be more complex</td><td>Usually easier</td></tr><tr><td>Best For</td><td>Tree structures, divide-and-conquer algorithms</td><td>Linear processes, performance-critical code</td></tr></table>",
    "exercises": [
        {
            "title": "Recursive Sum",
            "description": "Write a recursive function that calculates the sum of all numbers from 1 to n.",
            "hint": "The base case could be when n is 0 or 1. For the recursive case, add n to the sum of numbers from 1 to n-1.",
            "startingCode": "# Define your recursive sum function\ndef recursive_sum(n):\n    # Base case\n    \n    # Recursive case\n    \n\n# Test your function with different values\nprint(recursive_sum(5))  # Expected output: 15 (1+2+3+4+5)\nprint(recursive_sum(10))  # Expected output: 55"
        },
        {
            "title": "Palindrome Checker",
            "description": "Create a recursive function to check if a string is a palindrome (reads the same forward and backward, ignoring spaces and capitalization).",
            "hint": "Compare the first and last characters. If they match, recursively check if the substring (excluding first and last characters) is a palindrome.",
            "startingCode": "# Define your recursive palindrome checker function\ndef is_palindrome(s):\n    # Remove spaces and convert to lowercase for consistent comparison\n    s = s.replace(\" \", \"\").lower()\n    \n    # Base case\n    \n    # Recursive case\n    \n\n# Test your function with different strings\nprint(is_palindrome(\"racecar\"))  # Expected output: True\nprint(is_palindrome(\"hello\"))    # Expected output: False\nprint(is_palindrome(\"A man a plan a canal Panama\"))  # Expected output: True"
        },
        {
            "title": "Recursive Binary Search",
            "description": "Implement a recursive binary search algorithm to find the position of a target value in a sorted array.",
            "hint": "The base cases are when the item is found or when the search space is empty. For the recursive case, compare the target to the middle element and recursively search either the left or right half accordingly.",
            "startingCode": "# Define your recursive binary search function\ndef binary_search(arr, target, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    \n    # Base case(s)\n    \n    # Find the middle element\n    \n    # Recursive cases\n    \n\n# Test your function\nsorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nprint(binary_search(sorted_list, 7))   # Expected output: 3 (index of 7)\nprint(binary_search(sorted_list, 10))  # Expected output: -1 (not found)"
        }
    ]
} 